{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://YoutubeBookmarker/webpack/bootstrap","webpack://YoutubeBookmarker/webpack/runtime/make namespace object","webpack://YoutubeBookmarker/./src/background/background.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","chrome.runtime.onInstalled.addListener(() => {\n    console.log(\"Extension installed\");\n});\n// created for return current tab url\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"getCurrentTabUrl\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            if (tabs.length > 0) {\n                const tabUrl = tabs[0].url; // Get the URL of the current active tab\n                sendResponse({ url: tabUrl });\n            }\n        });\n        // Return true to indicate that the response will be sent asynchronously\n        return true;\n    }\n});\n//created for listen message\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type == \"scrapeData\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n            if (tabs) {\n                let data = Object.assign({}, message.data);\n                let url = tabs[0].url;\n                if (url === null || url === void 0 ? void 0 : url.includes(\"&t\")) {\n                    url = url.split(\"&t\")[0];\n                }\n                let localStorageData = [];\n                localStorageData.push({\n                    url: `${url}&t=${data.value}s`,\n                    duration: data.duration,\n                    position: data.position,\n                    timeText: formateTime(Number(data.value)),\n                    value: data.value,\n                });\n                chrome.storage.local.get(\"youtubeBookmarks\", function (result) {\n                    if (result.youtubeBookmarks) {\n                        localStorageData = [\n                            ...result.youtubeBookmarks,\n                            ...localStorageData,\n                        ];\n                        localStoreData(localStorageData);\n                    }\n                    else {\n                        localStoreData(localStorageData);\n                    }\n                });\n            }\n        });\n    }\n    else if (message.type == \"playPause\") {\n        chrome.tabs.update({ url: message.url });\n    }\n    else if (message.type == \"delete\") {\n        chrome.storage.local.get(\"youtubeBookmarks\", function (result) {\n            if (result.youtubeBookmarks) {\n                const updatedData = result.youtubeBookmarks.filter((_, index) => index !== message.number);\n                localStoreData(updatedData);\n                sendResponse({ message: \"success\" });\n            }\n        });\n    }\n    else if (message.type == \"removePointer\") {\n        // chrome.runtime.sendMessage({ type: \"removePointerContentScript\" });\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n            if (tabs) {\n                chrome.tabs.sendMessage(tabs[0].id || 0, {\n                    type: \"removePointerContentScript\",\n                    data: message.updatedData,\n                });\n            }\n        });\n        sendResponse({ message: \"success\" });\n    }\n    else if (message.type == \"activeRemoverConformationPopup\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            if (tabs.length > 0) {\n                chrome.tabs.sendMessage(tabs[0].id || 0, {\n                    type: \"removePointerContentScriptDisable\",\n                });\n            }\n        });\n    }\n});\n//created for listen url change\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (changeInfo.url) {\n        // URL changed, send a message to the content script\n        chrome.tabs.sendMessage(tabId, { type: \"urlChanged\" });\n    }\n});\n/**\n * Stores the provided data in the local Chrome storage under the key \"youtubeBookmarks\".\n *\n * @param {localStorageDataInterface[]} data - An array of data objects to be stored in local storage.\n */\n/**\n * Stores the provided data in the local Chrome storage under the key \"youtubeBookmarks\".\n *\n * @param {localStorageDataInterface[]} data - An array of data objects to be stored in local storage.\n */\nconst localStoreData = (data) => {\n    chrome.storage.local.set({ youtubeBookmarks: data });\n};\n/**\n * Format a time in seconds into a string of the form \"HH:MM:SS\" or \"MM:SS\"\n * if the number of hours is zero.\n * @param {number} seconds The number of seconds to format.\n * @returns {string} The formatted time string.\n */\nconst formateTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    const formattedHours = String(hours).padStart(2, \"0\");\n    const formattedMinutes = String(minutes).padStart(2, \"0\");\n    const formattedSeconds = String(remainingSeconds).padStart(2, \"0\");\n    if (formattedHours == \"00\") {\n        return `${formattedMinutes}:${formattedSeconds}`;\n    }\n    else {\n        return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    }\n};\nexport {};\n"],"names":[],"sourceRoot":""}